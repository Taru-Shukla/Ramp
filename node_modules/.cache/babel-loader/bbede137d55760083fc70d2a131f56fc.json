{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const [loaded, setLoading] = useState(false); // const fetchAll = useCallback(async () => {\n  //   const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n  //     \"paginatedTransactions\",\n  //     {\n  //       page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n  //     }\n  //   )\n  //   setPaginatedTransactions((previousResponse) => {\n  //     if (response === null || previousResponse === null) {\n  //       return response\n  //     }\n  //     return { data: response.data, nextPage: response.nextPage }\n  //   })\n  // }, [fetchWithCache, paginatedTransactions])\n\n  const fetchAll = useCallback(async () => {\n    // If already fetching, return early\n    if (loaded) return;\n    setLoading(true);\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null) {\n        return response;\n      }\n\n      if (previousResponse === null) {\n        return response;\n      } // Append the newly fetched transactions to the old ones\n\n\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage\n      };\n    });\n    setLoading(false);\n  }, [fetchWithCache, paginatedTransactions, loaded]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loaded,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"x0jZ5moWZpYI79t5yORj64NAk9s=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","loaded","setLoading","fetchAll","response","page","nextPage","previousResponse","data","invalidateData"],"sources":["/Users/tarushukla/Downloads/ramp-fe-challenge 2/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n  const [loaded, setLoading] = useState(false)\n\n\n  // const fetchAll = useCallback(async () => {\n  //   const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n  //     \"paginatedTransactions\",\n  //     {\n  //       page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n  //     }\n  //   )\n\n  //   setPaginatedTransactions((previousResponse) => {\n  //     if (response === null || previousResponse === null) {\n  //       return response\n  //     }\n\n  //     return { data: response.data, nextPage: response.nextPage }\n  //   })\n  // }, [fetchWithCache, paginatedTransactions])\n  const fetchAll = useCallback(async () => {\n    // If already fetching, return early\n    if (loaded) return;\n  \n    setLoading(true);\n  \n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n      }\n    )\n  \n    setPaginatedTransactions((previousResponse) => {\n      if (response === null) {\n        return response\n      }\n  \n      if (previousResponse === null) {\n        return response\n      }\n  \n      // Append the newly fetched transactions to the old ones\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage\n      }\n    })\n  \n    setLoading(false);\n  }, [fetchWithCache, paginatedTransactions, loaded])\n  \n  \n  \n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loaded, fetchAll, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAExD,IAFwD,CAAlE;EAGA,MAAM,CAACO,MAAD,EAASC,UAAT,IAAuBR,QAAQ,CAAC,KAAD,CAArC,CALsE,CAQtE;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;;EACA,MAAMS,QAAQ,GAAGV,WAAW,CAAC,YAAY;IACvC;IACA,IAAIQ,MAAJ,EAAY;IAEZC,UAAU,CAAC,IAAD,CAAV;IAEA,MAAME,QAAQ,GAAG,MAAMP,cAAc,CACnC,uBADmC,EAEnC;MACEQ,IAAI,EAAEN,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACO;IADnE,CAFmC,CAArC;IAOAN,wBAAwB,CAAEO,gBAAD,IAAsB;MAC7C,IAAIH,QAAQ,KAAK,IAAjB,EAAuB;QACrB,OAAOA,QAAP;MACD;;MAED,IAAIG,gBAAgB,KAAK,IAAzB,EAA+B;QAC7B,OAAOH,QAAP;MACD,CAP4C,CAS7C;;;MACA,OAAO;QACLI,IAAI,EAAE,CAAC,GAAGD,gBAAgB,CAACC,IAArB,EAA2B,GAAGJ,QAAQ,CAACI,IAAvC,CADD;QAELF,QAAQ,EAAEF,QAAQ,CAACE;MAFd,CAAP;IAID,CAduB,CAAxB;IAgBAJ,UAAU,CAAC,KAAD,CAAV;EACD,CA9B2B,EA8BzB,CAACL,cAAD,EAAiBE,qBAAjB,EAAwCE,MAAxC,CA9ByB,CAA5B;EAmCA,MAAMQ,cAAc,GAAGhB,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEQ,IAAI,EAAET,qBAAR;IAA+BE,MAA/B;IAAuCE,QAAvC;IAAiDM;EAAjD,CAAP;AACD;;GAhEeb,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}