{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState(null); // const fetchById = useCallback(\n  //   async (employeeId: string) => {\n  //     const data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n  //       \"transactionsByEmployee\",\n  //       {\n  //         employeeId,\n  //       }\n  //     )\n  //     setTransactionsByEmployee(data)\n  //   },\n  //   [fetchWithCache]\n  // )\n\n  const fetchById = useCallback(async employeeId => {\n    // Check if \"All Employees\" option is selected\n    if (employeeId === 'all') {\n      // If \"All Employees\" option is selected, fetch all transactions\n      const allTransactionsData = await fetchWithCache(\"transactionsByEmployee\", {\n        employeeId // 'all' is considered as a special ID to fetch all transactions\n\n      });\n      setTransactionsByEmployee(allTransactionsData);\n    } else {\n      // If a specific employee is selected, fetch transactions for that employee\n      const data = await fetchWithCache(\"transactionsByEmployee\", {\n        employeeId\n      });\n      setTransactionsByEmployee(data);\n    }\n  }, [fetchWithCache]);\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null);\n  }, []);\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    invalidateData\n  };\n}\n\n_s(useTransactionsByEmployee, \"kKvyfBKX5wcdmUqML83LxPYcyfE=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useTransactionsByEmployee","fetchWithCache","loading","transactionsByEmployee","setTransactionsByEmployee","fetchById","employeeId","allTransactionsData","data","invalidateData"],"sources":["/Users/tarushukla/Downloads/ramp-fe-challenge 2/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\"\nimport { TransactionsByEmployeeResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function useTransactionsByEmployee(): TransactionsByEmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[] | null>(null)\n\n  // const fetchById = useCallback(\n  //   async (employeeId: string) => {\n  //     const data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n  //       \"transactionsByEmployee\",\n  //       {\n  //         employeeId,\n  //       }\n  //     )\n\n  //     setTransactionsByEmployee(data)\n  //   },\n  //   [fetchWithCache]\n  // )\n  const fetchById = useCallback(\n    async (employeeId: string) => {\n      // Check if \"All Employees\" option is selected\n      if (employeeId === 'all') {\n        // If \"All Employees\" option is selected, fetch all transactions\n        const allTransactionsData = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n          \"transactionsByEmployee\",\n          {\n            employeeId, // 'all' is considered as a special ID to fetch all transactions\n          }\n        )\n\n        setTransactionsByEmployee(allTransactionsData)\n      } else {\n        // If a specific employee is selected, fetch transactions for that employee\n        const data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n          \"transactionsByEmployee\",\n          {\n            employeeId,\n          }\n        )\n\n        setTransactionsByEmployee(data)\n      }\n    },\n    [fetchWithCache]\n  )\n  \n\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null)\n  }, [])\n\n  return { data: transactionsByEmployee, loading, fetchById, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,yBAAT,GAAmE;EAAA;;EACxE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,sBAAD,EAAyBC,yBAAzB,IAAsDN,QAAQ,CAAuB,IAAvB,CAApE,CAFwE,CAIxE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;;EACA,MAAMO,SAAS,GAAGR,WAAW,CAC3B,MAAOS,UAAP,IAA8B;IAC5B;IACA,IAAIA,UAAU,KAAK,KAAnB,EAA0B;MACxB;MACA,MAAMC,mBAAmB,GAAG,MAAMN,cAAc,CAC9C,wBAD8C,EAE9C;QACEK,UADF,CACc;;MADd,CAF8C,CAAhD;MAOAF,yBAAyB,CAACG,mBAAD,CAAzB;IACD,CAVD,MAUO;MACL;MACA,MAAMC,IAAI,GAAG,MAAMP,cAAc,CAC/B,wBAD+B,EAE/B;QACEK;MADF,CAF+B,CAAjC;MAOAF,yBAAyB,CAACI,IAAD,CAAzB;IACD;EACF,CAxB0B,EAyB3B,CAACP,cAAD,CAzB2B,CAA7B;EA6BA,MAAMQ,cAAc,GAAGZ,WAAW,CAAC,MAAM;IACvCO,yBAAyB,CAAC,IAAD,CAAzB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEI,IAAI,EAAEL,sBAAR;IAAgCD,OAAhC;IAAyCG,SAAzC;IAAoDI;EAApD,CAAP;AACD;;GAnDeT,yB;UACsBD,c"},"metadata":{},"sourceType":"module"}