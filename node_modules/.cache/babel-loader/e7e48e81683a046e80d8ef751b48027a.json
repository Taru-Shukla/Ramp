{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nimport { usePaginatedTransactions } from \"./usePaginatedTransactions\";\nexport function useTransactionsByEmployee(externalTransactionApprovalUpdates, setExternalTransactionApprovalUpdates) {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState([]);\n  const {\n    data: paginatedTransactions,\n    loading: transactionsLoading,\n    fetchAll: fetchAllTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const [transactionApprovalUpdates, setTransactionApprovalUpdates] = useState(externalTransactionApprovalUpdates);\n  const fetchById = useCallback(async employeeId => {\n    const fetchedTransactions = await fetchWithCache(\"transactionsByEmployee\", {\n      employeeId\n    });\n\n    if (fetchedTransactions) {\n      const updatedTransactions = fetchedTransactions.map(transaction => {\n        var _transactionApprovalU;\n\n        return { ...transaction,\n          approved: (_transactionApprovalU = transactionApprovalUpdates === null || transactionApprovalUpdates === void 0 ? void 0 : transactionApprovalUpdates[transaction.id]) !== null && _transactionApprovalU !== void 0 ? _transactionApprovalU : transaction.approved\n        };\n      });\n      setTransactionsByEmployee(updatedTransactions);\n    }\n  }, [fetchWithCache, transactionApprovalUpdates]); // const updateApprovalStatus = useCallback(\n  //   (transactionId: string, approved: boolean) => {\n  //     setTransactionApprovalUpdates(prevUpdates => ({\n  //       ...prevUpdates,\n  //       [transactionId]: approved,\n  //     }))\n  //     setExternalTransactionApprovalUpdates(prevUpdates => ({\n  //       ...prevUpdates,\n  //       [transactionId]: approved,\n  //     }))\n  //   },\n  //   [setExternalTransactionApprovalUpdates]\n  // )\n\n  const updateApprovalStatus = useCallback((transactionId, approved) => {\n    setTransactionApprovalUpdates(prevUpdates => ({ ...prevUpdates,\n      [transactionId]: approved\n    }));\n    setExternalTransactionApprovalUpdates(prevUpdates => ({ ...prevUpdates,\n      [transactionId]: approved\n    }));\n    paginatedTransactionsUtils.invalidateData(); // Invalidate All Transactions data\n  }, [setExternalTransactionApprovalUpdates, paginatedTransactionsUtils]);\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee([]); // Clear the transactions by setting it to an empty array\n  }, []);\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    invalidateData,\n    updateApprovalStatus\n  };\n}\n\n_s(useTransactionsByEmployee, \"2ACn9w5FZapR12lOcm8T3z7J3qc=\", false, function () {\n  return [useCustomFetch, usePaginatedTransactions];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","useTransactionsByEmployee","externalTransactionApprovalUpdates","setExternalTransactionApprovalUpdates","fetchWithCache","loading","transactionsByEmployee","setTransactionsByEmployee","data","paginatedTransactions","transactionsLoading","fetchAll","fetchAllTransactions","paginatedTransactionsUtils","transactionApprovalUpdates","setTransactionApprovalUpdates","fetchById","employeeId","fetchedTransactions","updatedTransactions","map","transaction","approved","id","updateApprovalStatus","transactionId","prevUpdates","invalidateData"],"sources":["/Users/tarushukla/Downloads/ramp-fe-challenge 2/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\";\nimport { TransactionsByEmployeeResult } from \"./types\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nimport{usePaginatedTransactions} from \"./usePaginatedTransactions\";\n\nexport function useTransactionsByEmployee(\n  externalTransactionApprovalUpdates: Record<string, boolean>,\n  setExternalTransactionApprovalUpdates: React.Dispatch<React.SetStateAction<Record<string, boolean>>>\n): TransactionsByEmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[]>([])\n  const { data: paginatedTransactions, loading: transactionsLoading, fetchAll: fetchAllTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const [transactionApprovalUpdates, setTransactionApprovalUpdates] = useState<Record<string, boolean>>(externalTransactionApprovalUpdates)\n\n  const fetchById = useCallback(\n    async (employeeId: string) => {\n      const fetchedTransactions = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n        \"transactionsByEmployee\",\n        { employeeId }\n      )\n      \n      if (fetchedTransactions) {\n        const updatedTransactions = fetchedTransactions.map((transaction) => ({\n          ...transaction,\n          approved: transactionApprovalUpdates?.[transaction.id] ?? transaction.approved\n        }))\n        setTransactionsByEmployee(updatedTransactions)\n      }\n      \n    },\n    [fetchWithCache, transactionApprovalUpdates]\n  )\n\n  // const updateApprovalStatus = useCallback(\n  //   (transactionId: string, approved: boolean) => {\n  //     setTransactionApprovalUpdates(prevUpdates => ({\n  //       ...prevUpdates,\n  //       [transactionId]: approved,\n  //     }))\n  //     setExternalTransactionApprovalUpdates(prevUpdates => ({\n  //       ...prevUpdates,\n  //       [transactionId]: approved,\n  //     }))\n  //   },\n  //   [setExternalTransactionApprovalUpdates]\n  // )\n  const updateApprovalStatus = useCallback(\n    (transactionId: string, approved: boolean) => {\n      setTransactionApprovalUpdates(prevUpdates => ({\n        ...prevUpdates,\n        [transactionId]: approved,\n      }))\n      setExternalTransactionApprovalUpdates(prevUpdates => ({\n        ...prevUpdates,\n        [transactionId]: approved,\n      }))\n      paginatedTransactionsUtils.invalidateData(); // Invalidate All Transactions data\n    },\n    [setExternalTransactionApprovalUpdates, paginatedTransactionsUtils]\n  )\n  \n  \n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee([]) // Clear the transactions by setting it to an empty array\n  }, [])\n\n  return { data: transactionsByEmployee, loading, fetchById, invalidateData, updateApprovalStatus }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAAOC,wBAAP,QAAsC,4BAAtC;AAEA,OAAO,SAASC,yBAAT,CACLC,kCADK,EAELC,qCAFK,EAGyB;EAAA;;EAC9B,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BN,cAAc,EAAlD;EACA,MAAM,CAACO,sBAAD,EAAyBC,yBAAzB,IAAsDT,QAAQ,CAAgB,EAAhB,CAApE;EACA,MAAM;IAAEU,IAAI,EAAEC,qBAAR;IAA+BJ,OAAO,EAAEK,mBAAxC;IAA6DC,QAAQ,EAAEC,oBAAvE;IAA6F,GAAGC;EAAhG,IAA+Hb,wBAAwB,EAA7J;EACA,MAAM,CAACc,0BAAD,EAA6BC,6BAA7B,IAA8DjB,QAAQ,CAA0BI,kCAA1B,CAA5E;EAEA,MAAMc,SAAS,GAAGnB,WAAW,CAC3B,MAAOoB,UAAP,IAA8B;IAC5B,MAAMC,mBAAmB,GAAG,MAAMd,cAAc,CAC9C,wBAD8C,EAE9C;MAAEa;IAAF,CAF8C,CAAhD;;IAKA,IAAIC,mBAAJ,EAAyB;MACvB,MAAMC,mBAAmB,GAAGD,mBAAmB,CAACE,GAApB,CAAyBC,WAAD;QAAA;;QAAA,OAAkB,EACpE,GAAGA,WADiE;UAEpEC,QAAQ,2BAAER,0BAAF,aAAEA,0BAAF,uBAAEA,0BAA0B,CAAGO,WAAW,CAACE,EAAf,CAA5B,yEAAkDF,WAAW,CAACC;QAFF,CAAlB;MAAA,CAAxB,CAA5B;MAIAf,yBAAyB,CAACY,mBAAD,CAAzB;IACD;EAEF,CAf0B,EAgB3B,CAACf,cAAD,EAAiBU,0BAAjB,CAhB2B,CAA7B,CAN8B,CAyB9B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,MAAMU,oBAAoB,GAAG3B,WAAW,CACtC,CAAC4B,aAAD,EAAwBH,QAAxB,KAA8C;IAC5CP,6BAA6B,CAACW,WAAW,KAAK,EAC5C,GAAGA,WADyC;MAE5C,CAACD,aAAD,GAAiBH;IAF2B,CAAL,CAAZ,CAA7B;IAIAnB,qCAAqC,CAACuB,WAAW,KAAK,EACpD,GAAGA,WADiD;MAEpD,CAACD,aAAD,GAAiBH;IAFmC,CAAL,CAAZ,CAArC;IAIAT,0BAA0B,CAACc,cAA3B,GAT4C,CASC;EAC9C,CAXqC,EAYtC,CAACxB,qCAAD,EAAwCU,0BAAxC,CAZsC,CAAxC;EAgBA,MAAMc,cAAc,GAAG9B,WAAW,CAAC,MAAM;IACvCU,yBAAyB,CAAC,EAAD,CAAzB,CADuC,CACT;EAC/B,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEC,IAAI,EAAEF,sBAAR;IAAgCD,OAAhC;IAAyCW,SAAzC;IAAoDW,cAApD;IAAoEH;EAApE,CAAP;AACD;;GA9DevB,yB;UAIsBF,c,EAEiGC,wB"},"metadata":{},"sourceType":"module"}