{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState([]);\n  const [transactionApprovalUpdates, setTransactionApprovalUpdates] = useState({});\n  const fetchById = useCallback(async employeeId => {\n    // Check if \"All Employees\" option is selected\n    if (employeeId === '') {\n      // If \"All Employees\" option is selected, fetch all transactions\n      const allTransactionsData = await fetchWithCache(\"transactionsByEmployee\", {\n        employeeId\n      } // '' is considered as a special ID to fetch all transactions\n      ); // Ensure allTransactionsData is not null before setting it\n\n      if (allTransactionsData) {\n        const updatedTransactions = allTransactionsData.map(transaction => {\n          var _transactionApprovalU;\n\n          return { ...transaction,\n            approved: (_transactionApprovalU = transactionApprovalUpdates[transaction.id]) !== null && _transactionApprovalU !== void 0 ? _transactionApprovalU : transaction.approved\n          };\n        });\n        setTransactionsByEmployee(updatedTransactions);\n      } else {\n        setTransactionsByEmployee([]);\n      }\n    } else {\n      // If a specific employee is selected, fetch transactions for that employee\n      const data = await fetchWithCache(\"transactionsByEmployee\", {\n        employeeId\n      }); // Ensure data is not null before setting it\n\n      if (data) {\n        const updatedTransactions = data.map(transaction => {\n          var _transactionApprovalU2;\n\n          return { ...transaction,\n            approved: (_transactionApprovalU2 = transactionApprovalUpdates[transaction.id]) !== null && _transactionApprovalU2 !== void 0 ? _transactionApprovalU2 : transaction.approved\n          };\n        });\n        setTransactionsByEmployee(updatedTransactions);\n      } else {\n        setTransactionsByEmployee([]);\n      }\n    }\n  }, [fetchWithCache, transactionApprovalUpdates]);\n  const updateApprovalStatus = useCallback((transactionId, approved) => {\n    setTransactionApprovalUpdates(prevUpdates => ({ ...prevUpdates,\n      [transactionId]: approved\n    }));\n  }, []);\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee([]); // Clear the transactions by setting it to an empty array\n  }, []);\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    invalidateData,\n    updateApprovalStatus\n  };\n}\n\n_s(useTransactionsByEmployee, \"gh6PjYY786K1yNfRhLlQ1kEaR3E=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useTransactionsByEmployee","fetchWithCache","loading","transactionsByEmployee","setTransactionsByEmployee","transactionApprovalUpdates","setTransactionApprovalUpdates","fetchById","employeeId","allTransactionsData","updatedTransactions","map","transaction","approved","id","data","updateApprovalStatus","transactionId","prevUpdates","invalidateData"],"sources":["/Users/tarushukla/Downloads/ramp-fe-challenge 2/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\";\nimport { TransactionsByEmployeeResult } from \"./types\";\nimport { useCustomFetch } from \"./useCustomFetch\";\n\nexport function useTransactionsByEmployee(): TransactionsByEmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[]>([]);\n  const [transactionApprovalUpdates, setTransactionApprovalUpdates] = useState<Record<string, boolean>>({});\n\n  const fetchById = useCallback(\n    async (employeeId: string) => {\n      // Check if \"All Employees\" option is selected\n      if (employeeId === '') {\n        // If \"All Employees\" option is selected, fetch all transactions\n        const allTransactionsData = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n          \"transactionsByEmployee\",\n          { employeeId } // '' is considered as a special ID to fetch all transactions\n        )\n\n        // Ensure allTransactionsData is not null before setting it\n        if (allTransactionsData) {\n          const updatedTransactions = allTransactionsData.map((transaction) => ({\n            ...transaction,\n            approved: transactionApprovalUpdates[transaction.id] ?? transaction.approved\n          }));\n          setTransactionsByEmployee(updatedTransactions);\n        } else {\n          setTransactionsByEmployee([]);\n        }\n      } else {\n        // If a specific employee is selected, fetch transactions for that employee\n        const data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n          \"transactionsByEmployee\",\n          { employeeId }\n        )\n\n        // Ensure data is not null before setting it\n        if (data) {\n          const updatedTransactions = data.map((transaction) => ({\n            ...transaction,\n            approved: transactionApprovalUpdates[transaction.id] ?? transaction.approved\n          }));\n          setTransactionsByEmployee(updatedTransactions);\n        } else {\n          setTransactionsByEmployee([]);\n        }\n      }\n    },\n    [fetchWithCache, transactionApprovalUpdates]\n  )\n\n  const updateApprovalStatus = useCallback(\n    (transactionId: string, approved: boolean) => {\n      setTransactionApprovalUpdates((prevUpdates) => ({\n        ...prevUpdates,\n        [transactionId]: approved,\n      }))\n    },\n    []\n  )\n\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee([]) // Clear the transactions by setting it to an empty array\n  }, [])\n\n  return { data: transactionsByEmployee, loading, fetchById, invalidateData, updateApprovalStatus };\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,yBAAT,GAAmE;EAAA;;EACxE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,sBAAD,EAAyBC,yBAAzB,IAAsDN,QAAQ,CAAgB,EAAhB,CAApE;EACA,MAAM,CAACO,0BAAD,EAA6BC,6BAA7B,IAA8DR,QAAQ,CAA0B,EAA1B,CAA5E;EAEA,MAAMS,SAAS,GAAGV,WAAW,CAC3B,MAAOW,UAAP,IAA8B;IAC5B;IACA,IAAIA,UAAU,KAAK,EAAnB,EAAuB;MACrB;MACA,MAAMC,mBAAmB,GAAG,MAAMR,cAAc,CAC9C,wBAD8C,EAE9C;QAAEO;MAAF,CAF8C,CAE/B;MAF+B,CAAhD,CAFqB,CAOrB;;MACA,IAAIC,mBAAJ,EAAyB;QACvB,MAAMC,mBAAmB,GAAGD,mBAAmB,CAACE,GAApB,CAAyBC,WAAD;UAAA;;UAAA,OAAkB,EACpE,GAAGA,WADiE;YAEpEC,QAAQ,2BAAER,0BAA0B,CAACO,WAAW,CAACE,EAAb,CAA5B,yEAAgDF,WAAW,CAACC;UAFA,CAAlB;QAAA,CAAxB,CAA5B;QAIAT,yBAAyB,CAACM,mBAAD,CAAzB;MACD,CAND,MAMO;QACLN,yBAAyB,CAAC,EAAD,CAAzB;MACD;IACF,CAjBD,MAiBO;MACL;MACA,MAAMW,IAAI,GAAG,MAAMd,cAAc,CAC/B,wBAD+B,EAE/B;QAAEO;MAAF,CAF+B,CAAjC,CAFK,CAOL;;MACA,IAAIO,IAAJ,EAAU;QACR,MAAML,mBAAmB,GAAGK,IAAI,CAACJ,GAAL,CAAUC,WAAD;UAAA;;UAAA,OAAkB,EACrD,GAAGA,WADkD;YAErDC,QAAQ,4BAAER,0BAA0B,CAACO,WAAW,CAACE,EAAb,CAA5B,2EAAgDF,WAAW,CAACC;UAFf,CAAlB;QAAA,CAAT,CAA5B;QAIAT,yBAAyB,CAACM,mBAAD,CAAzB;MACD,CAND,MAMO;QACLN,yBAAyB,CAAC,EAAD,CAAzB;MACD;IACF;EACF,CAtC0B,EAuC3B,CAACH,cAAD,EAAiBI,0BAAjB,CAvC2B,CAA7B;EA0CA,MAAMW,oBAAoB,GAAGnB,WAAW,CACtC,CAACoB,aAAD,EAAwBJ,QAAxB,KAA8C;IAC5CP,6BAA6B,CAAEY,WAAD,KAAkB,EAC9C,GAAGA,WAD2C;MAE9C,CAACD,aAAD,GAAiBJ;IAF6B,CAAlB,CAAD,CAA7B;EAID,CANqC,EAOtC,EAPsC,CAAxC;EAUA,MAAMM,cAAc,GAAGtB,WAAW,CAAC,MAAM;IACvCO,yBAAyB,CAAC,EAAD,CAAzB,CADuC,CACT;EAC/B,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEW,IAAI,EAAEZ,sBAAR;IAAgCD,OAAhC;IAAyCK,SAAzC;IAAoDY,cAApD;IAAoEH;EAApE,CAAP;AACD;;GA9DehB,yB;UACsBD,c"},"metadata":{},"sourceType":"module"}