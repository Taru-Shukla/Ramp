{"ast":null,"code":"var _jsxFileName = \"/Users/tarushukla/Downloads/ramp-fe-challenge 2/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    loading: employeesLoading,\n    fetchAll: fetchAllEmployees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    loading: transactionsLoading,\n    fetchAll: fetchAllTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const [transactionApprovalUpdates, setTransactionApprovalUpdates] = useState({});\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee(transactionApprovalUpdates, setTransactionApprovalUpdates);\n  const [isEmployeeFilterApplied, setIsEmployeeFilterApplied] = useState(false);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    transactionsByEmployeeUtils.invalidateData();\n    await fetchAllEmployees();\n    await fetchAllTransactions();\n  }, [fetchAllEmployees, fetchAllTransactions, transactionsByEmployeeUtils]); // const loadTransactionsByEmployee = useCallback(\n  //   async (employeeId: string) => {\n  //     paginatedTransactionsUtils.invalidateData()\n  //     await transactionsByEmployeeUtils.fetchById(employeeId)\n  //   },\n  //   [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  // )\n\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    setIsEmployeeFilterApplied(true);\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeesLoading) {\n      loadAllTransactions();\n    }\n  }, [employeesLoading, employees, loadAllTransactions]);\n  useEffect(() => {\n    if (!isEmployeeFilterApplied) {\n      // Invalidate and fetch all transactions data again when transactionApprovalUpdates changes\n      fetchAllTransactions();\n    }\n  }, [transactionApprovalUpdates, fetchAllTransactions, isEmployeeFilterApplied]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: employeesLoading // modified to employeesLoading here\n        ,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null || newValue.id === '') {\n            // Checking for null or empty string ID\n            // Fetch all transactions when \"All Employees\" is selected\n            setIsEmployeeFilterApplied(false);\n            setTransactionApprovalUpdates({}); // Clear transaction approval updates\n\n            await loadAllTransactions();\n          } else {\n            // Fetch transactions for the selected employee\n            setTransactionApprovalUpdates({}); // Clear transaction approval updates\n\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null && !isEmployeeFilterApplied && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: transactionsLoading // modified to transactionsLoading here\n          ,\n          onClick: async () => {\n            await fetchAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"FqRqhIRtck2M+iyOHtHcyxDJ7yI=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","loading","employeesLoading","fetchAll","fetchAllEmployees","employeeUtils","paginatedTransactions","transactionsLoading","fetchAllTransactions","paginatedTransactionsUtils","transactionApprovalUpdates","setTransactionApprovalUpdates","transactionsByEmployee","transactionsByEmployeeUtils","isEmployeeFilterApplied","setIsEmployeeFilterApplied","transactions","loadAllTransactions","invalidateData","loadTransactionsByEmployee","employeeId","fetchById","item","value","id","label","firstName","lastName","newValue","nextPage"],"sources":["/Users/tarushukla/Downloads/ramp-fe-challenge 2/src/App.tsx"],"sourcesContent":["import React from \"react\";\nimport { Fragment, useCallback,useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, loading: employeesLoading, fetchAll: fetchAllEmployees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, loading: transactionsLoading, fetchAll: fetchAllTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  \n  const [transactionApprovalUpdates, setTransactionApprovalUpdates] = useState({})\n\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee(transactionApprovalUpdates, setTransactionApprovalUpdates)\n  \n  const [isEmployeeFilterApplied, setIsEmployeeFilterApplied] = useState(false);\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    transactionsByEmployeeUtils.invalidateData()\n\n    await fetchAllEmployees()\n    await fetchAllTransactions()\n\n  }, [fetchAllEmployees, fetchAllTransactions, transactionsByEmployeeUtils])\n\n  // const loadTransactionsByEmployee = useCallback(\n  //   async (employeeId: string) => {\n  //     paginatedTransactionsUtils.invalidateData()\n  //     await transactionsByEmployeeUtils.fetchById(employeeId)\n  //   },\n  //   [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  // )\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      setIsEmployeeFilterApplied(true);\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n  \n  useEffect(() => {\n    if (employees === null && !employeesLoading) {\n      loadAllTransactions()\n    }\n  }, [employeesLoading, employees, loadAllTransactions])\nuseEffect(() => {\n  if (!isEmployeeFilterApplied) {\n    // Invalidate and fetch all transactions data again when transactionApprovalUpdates changes\n    fetchAllTransactions();\n  }\n}, [transactionApprovalUpdates, fetchAllTransactions, isEmployeeFilterApplied]);\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={employeesLoading} // modified to employeesLoading here\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null || newValue.id === '') { // Checking for null or empty string ID\n              // Fetch all transactions when \"All Employees\" is selected\n              setIsEmployeeFilterApplied(false);\n              setTransactionApprovalUpdates({}); // Clear transaction approval updates\n              await loadAllTransactions()\n            } else {\n              // Fetch transactions for the selected employee\n              setTransactionApprovalUpdates({}); // Clear transaction approval updates\n              await loadTransactionsByEmployee(newValue.id);\n            }\n          }}\n          \n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n           {/* Show 'View More' button only when there's a next page for paginated transactions and not filtering by employee*/}\n        {paginatedTransactions?.nextPage !== null && !isEmployeeFilterApplied && (\n          <button\n            className=\"RampButton\"\n            disabled={transactionsLoading} // modified to transactionsLoading here\n            onClick={async () => {\n              await fetchAllTransactions()\n            }}\n          >\n            View More\n          </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAA+BC,SAA/B,EAA0CC,OAA1C,EAAmDC,QAAnD,QAAmE,OAAnE;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,SAASC,wBAAT,QAAyC,kCAAzC;AACA,SAASC,yBAAT,QAA0C,mCAA1C;AACA,SAASC,cAAT,QAA+B,mBAA/B;;AAGA,OAAO,SAASC,GAAT,GAAe;EAAA;;EACpB,MAAM;IAAEC,IAAI,EAAEC,SAAR;IAAmBC,OAAO,EAAEC,gBAA5B;IAA8CC,QAAQ,EAAEC,iBAAxD;IAA2E,GAAGC;EAA9E,IAAgGX,YAAY,EAAlH;EACA,MAAM;IAAEK,IAAI,EAAEO,qBAAR;IAA+BL,OAAO,EAAEM,mBAAxC;IAA6DJ,QAAQ,EAAEK,oBAAvE;IAA6F,GAAGC;EAAhG,IAA+Hd,wBAAwB,EAA7J;EAEA,MAAM,CAACe,0BAAD,EAA6BC,6BAA7B,IAA8DrB,QAAQ,CAAC,EAAD,CAA5E;EAEA,MAAM;IAAES,IAAI,EAAEa,sBAAR;IAAgC,GAAGC;EAAnC,IAAmEjB,yBAAyB,CAACc,0BAAD,EAA6BC,6BAA7B,CAAlG;EAEA,MAAM,CAACG,uBAAD,EAA0BC,0BAA1B,IAAwDzB,QAAQ,CAAC,KAAD,CAAtE;EAEA,MAAM0B,YAAY,GAAG3B,OAAO,CAC1B;IAAA;;IAAA,wCAAMiB,qBAAN,aAAMA,qBAAN,uBAAMA,qBAAqB,CAAEP,IAA7B,yEAAqCa,sBAArC,uCAA+D,IAA/D;EAAA,CAD0B,EAE1B,CAACN,qBAAD,EAAwBM,sBAAxB,CAF0B,CAA5B;EAKA,MAAMK,mBAAmB,GAAG9B,WAAW,CAAC,YAAY;IAClD0B,2BAA2B,CAACK,cAA5B;IAEA,MAAMd,iBAAiB,EAAvB;IACA,MAAMI,oBAAoB,EAA1B;EAED,CANsC,EAMpC,CAACJ,iBAAD,EAAoBI,oBAApB,EAA0CK,2BAA1C,CANoC,CAAvC,CAfoB,CAuBpB;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,MAAMM,0BAA0B,GAAGhC,WAAW,CAC5C,MAAOiC,UAAP,IAA8B;IAC5BL,0BAA0B,CAAC,IAAD,CAA1B;IACAN,0BAA0B,CAACS,cAA3B;IACA,MAAML,2BAA2B,CAACQ,SAA5B,CAAsCD,UAAtC,CAAN;EACD,CAL2C,EAM5C,CAACX,0BAAD,EAA6BI,2BAA7B,CAN4C,CAA9C;EASAzB,SAAS,CAAC,MAAM;IACd,IAAIY,SAAS,KAAK,IAAd,IAAsB,CAACE,gBAA3B,EAA6C;MAC3Ce,mBAAmB;IACpB;EACF,CAJQ,EAIN,CAACf,gBAAD,EAAmBF,SAAnB,EAA8BiB,mBAA9B,CAJM,CAAT;EAKF7B,SAAS,CAAC,MAAM;IACd,IAAI,CAAC0B,uBAAL,EAA8B;MAC5B;MACAN,oBAAoB;IACrB;EACF,CALQ,EAKN,CAACE,0BAAD,EAA6BF,oBAA7B,EAAmDM,uBAAnD,CALM,CAAT;EAOE,oBACE,QAAC,QAAD;IAAA,uBACE;MAAM,SAAS,EAAC,eAAhB;MAAA,wBACE,QAAC,YAAD;QAAA;QAAA;QAAA;MAAA,QADF,eAGE;QAAI,SAAS,EAAC;MAAd;QAAA;QAAA;QAAA;MAAA,QAHF,eAKE,QAAC,WAAD;QACE,SAAS,EAAEZ,gBADb,CAC+B;QAD/B;QAEE,YAAY,EAAEL,cAFhB;QAGE,KAAK,EAAEG,SAAS,KAAK,IAAd,GAAqB,EAArB,GAA0B,CAACH,cAAD,EAAiB,GAAGG,SAApB,CAHnC;QAIE,KAAK,EAAC,oBAJR;QAKE,YAAY,EAAC,mBALf;QAME,SAAS,EAAGsB,IAAD,KAAW;UACpBC,KAAK,EAAED,IAAI,CAACE,EADQ;UAEpBC,KAAK,EAAG,GAAEH,IAAI,CAACI,SAAU,IAAGJ,IAAI,CAACK,QAAS;QAFtB,CAAX,CANb;QAUE,QAAQ,EAAE,MAAOC,QAAP,IAAoB;UAC5B,IAAIA,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,CAACJ,EAAT,KAAgB,EAAzC,EAA6C;YAAE;YAC7C;YACAT,0BAA0B,CAAC,KAAD,CAA1B;YACAJ,6BAA6B,CAAC,EAAD,CAA7B,CAH2C,CAGR;;YACnC,MAAMM,mBAAmB,EAAzB;UACD,CALD,MAKO;YACL;YACAN,6BAA6B,CAAC,EAAD,CAA7B,CAFK,CAE8B;;YACnC,MAAMQ,0BAA0B,CAACS,QAAQ,CAACJ,EAAV,CAAhC;UACD;QACF;MArBH;QAAA;QAAA;QAAA;MAAA,QALF,eA8BE;QAAK,SAAS,EAAC;MAAf;QAAA;QAAA;QAAA;MAAA,QA9BF,eAgCE;QAAK,SAAS,EAAC,UAAf;QAAA,wBACE,QAAC,YAAD;UAAc,YAAY,EAAER;QAA5B;UAAA;UAAA;UAAA;QAAA,QADF,EAIC,CAAAV,qBAAqB,SAArB,IAAAA,qBAAqB,WAArB,YAAAA,qBAAqB,CAAEuB,QAAvB,MAAoC,IAApC,IAA4C,CAACf,uBAA7C,iBACC;UACE,SAAS,EAAC,YADZ;UAEE,QAAQ,EAAEP,mBAFZ,CAEiC;UAFjC;UAGE,OAAO,EAAE,YAAY;YACnB,MAAMC,oBAAoB,EAA1B;UACD,CALH;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QALF;MAAA;QAAA;QAAA;QAAA;MAAA,QAhCF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAqDD;;GAxGeV,G;UACwFJ,Y,EAC+BC,wB,EAI5DC,yB;;;KAN3DE,G"},"metadata":{},"sourceType":"module"}