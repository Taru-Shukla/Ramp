{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState([]);\n  const [transactionApprovalUpdates, setTransactionApprovalUpdates] = useState({});\n  const fetchById = useCallback(async employeeId => {\n    let fetchedTransactions = null;\n\n    if (employeeId === '') {\n      fetchedTransactions = await fetchWithCache(\"transactionsByEmployee\", {\n        employeeId\n      } // '' is considered as a special ID to fetch all transactions\n      );\n    } else {\n      fetchedTransactions = await fetchWithCache(\"transactionsByEmployee\", {\n        employeeId\n      });\n    }\n\n    if (fetchedTransactions) {\n      // apply any approval updates to the fetched transactions\n      const updatedTransactions = fetchedTransactions.map(transaction => ({ ...transaction,\n        approved: transactionApprovalUpdates[transaction.id] !== undefined ? transactionApprovalUpdates[transaction.id] : transaction.approved\n      }));\n      setTransactionsByEmployee(updatedTransactions);\n    } else {\n      setTransactionsByEmployee([]);\n    }\n  }, [fetchWithCache, transactionApprovalUpdates]);\n  const updateApprovalStatus = useCallback((transactionId, approved) => {\n    setTransactionApprovalUpdates(prevUpdates => ({ ...prevUpdates,\n      [transactionId]: approved\n    }));\n  }, []);\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee([]); // Clear the transactions by setting it to an empty array\n  }, []);\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    invalidateData,\n    updateApprovalStatus\n  };\n}\n\n_s(useTransactionsByEmployee, \"gh6PjYY786K1yNfRhLlQ1kEaR3E=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useTransactionsByEmployee","fetchWithCache","loading","transactionsByEmployee","setTransactionsByEmployee","transactionApprovalUpdates","setTransactionApprovalUpdates","fetchById","employeeId","fetchedTransactions","updatedTransactions","map","transaction","approved","id","undefined","updateApprovalStatus","transactionId","prevUpdates","invalidateData","data"],"sources":["/Users/tarushukla/Downloads/ramp-fe-challenge 2/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\";\nimport { TransactionsByEmployeeResult } from \"./types\";\nimport { useCustomFetch } from \"./useCustomFetch\";\n\nexport function useTransactionsByEmployee(): TransactionsByEmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[]>([]);\n  const [transactionApprovalUpdates, setTransactionApprovalUpdates] = useState<Record<string, boolean>>({});\n\n  const fetchById = useCallback(\n    async (employeeId: string) => {\n      let fetchedTransactions: Transaction[] | null = null;\n      if (employeeId === '') {\n        fetchedTransactions = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n          \"transactionsByEmployee\",\n          { employeeId } // '' is considered as a special ID to fetch all transactions\n        );\n      } else {\n        fetchedTransactions = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n          \"transactionsByEmployee\",\n          { employeeId }\n        );\n      }\n  \n      if (fetchedTransactions) {\n        // apply any approval updates to the fetched transactions\n        const updatedTransactions = fetchedTransactions.map((transaction) => ({\n          ...transaction,\n          approved: transactionApprovalUpdates[transaction.id] !== undefined ? transactionApprovalUpdates[transaction.id] : transaction.approved,\n        }));\n        setTransactionsByEmployee(updatedTransactions);\n      } else {\n        setTransactionsByEmployee([]);\n      }\n    },\n    [fetchWithCache, transactionApprovalUpdates]\n  );\n\n  const updateApprovalStatus = useCallback(\n    (transactionId: string, approved: boolean) => {\n      setTransactionApprovalUpdates((prevUpdates) => ({\n        ...prevUpdates,\n        [transactionId]: approved,\n      }))\n    },\n    []\n  )\n\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee([]) // Clear the transactions by setting it to an empty array\n  }, [])\n\n  return { data: transactionsByEmployee, loading, fetchById, invalidateData, updateApprovalStatus };\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,yBAAT,GAAmE;EAAA;;EACxE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,sBAAD,EAAyBC,yBAAzB,IAAsDN,QAAQ,CAAgB,EAAhB,CAApE;EACA,MAAM,CAACO,0BAAD,EAA6BC,6BAA7B,IAA8DR,QAAQ,CAA0B,EAA1B,CAA5E;EAEA,MAAMS,SAAS,GAAGV,WAAW,CAC3B,MAAOW,UAAP,IAA8B;IAC5B,IAAIC,mBAAyC,GAAG,IAAhD;;IACA,IAAID,UAAU,KAAK,EAAnB,EAAuB;MACrBC,mBAAmB,GAAG,MAAMR,cAAc,CACxC,wBADwC,EAExC;QAAEO;MAAF,CAFwC,CAEzB;MAFyB,CAA1C;IAID,CALD,MAKO;MACLC,mBAAmB,GAAG,MAAMR,cAAc,CACxC,wBADwC,EAExC;QAAEO;MAAF,CAFwC,CAA1C;IAID;;IAED,IAAIC,mBAAJ,EAAyB;MACvB;MACA,MAAMC,mBAAmB,GAAGD,mBAAmB,CAACE,GAApB,CAAyBC,WAAD,KAAkB,EACpE,GAAGA,WADiE;QAEpEC,QAAQ,EAAER,0BAA0B,CAACO,WAAW,CAACE,EAAb,CAA1B,KAA+CC,SAA/C,GAA2DV,0BAA0B,CAACO,WAAW,CAACE,EAAb,CAArF,GAAwGF,WAAW,CAACC;MAF1D,CAAlB,CAAxB,CAA5B;MAIAT,yBAAyB,CAACM,mBAAD,CAAzB;IACD,CAPD,MAOO;MACLN,yBAAyB,CAAC,EAAD,CAAzB;IACD;EACF,CAzB0B,EA0B3B,CAACH,cAAD,EAAiBI,0BAAjB,CA1B2B,CAA7B;EA6BA,MAAMW,oBAAoB,GAAGnB,WAAW,CACtC,CAACoB,aAAD,EAAwBJ,QAAxB,KAA8C;IAC5CP,6BAA6B,CAAEY,WAAD,KAAkB,EAC9C,GAAGA,WAD2C;MAE9C,CAACD,aAAD,GAAiBJ;IAF6B,CAAlB,CAAD,CAA7B;EAID,CANqC,EAOtC,EAPsC,CAAxC;EAUA,MAAMM,cAAc,GAAGtB,WAAW,CAAC,MAAM;IACvCO,yBAAyB,CAAC,EAAD,CAAzB,CADuC,CACT;EAC/B,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEgB,IAAI,EAAEjB,sBAAR;IAAgCD,OAAhC;IAAyCK,SAAzC;IAAoDY,cAApD;IAAoEH;EAApE,CAAP;AACD;;GAjDehB,yB;UACsBD,c"},"metadata":{},"sourceType":"module"}