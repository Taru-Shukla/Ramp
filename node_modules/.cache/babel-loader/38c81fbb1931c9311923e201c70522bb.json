{"ast":null,"code":"var _jsxFileName = \"/Users/tarushukla/Downloads/ramp-fe-challenge 2/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    loading: employeesLoading,\n    fetchAll: fetchAllEmployees,\n    ...employeeUtils\n  } = useEmployees(); // const { data: paginatedTransactions, loading: transactionsLoading, fetchAll: fetchAllTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  // const [transactionApprovalUpdates, setTransactionApprovalUpdates] = useState({})\n  // const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee(transactionApprovalUpdates, setTransactionApprovalUpdates)\n\n  const [isEmployeeFilterApplied, setIsEmployeeFilterApplied] = useState(false);\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState(null);\n  const {\n    data: paginatedTransactions,\n    loading: transactionsLoading,\n    fetchAll: fetchAllTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const [transactionApprovalUpdates, setTransactionApprovalUpdates] = useState({});\n  const transactionsByEmployeeUtils = useTransactionsByEmployee(transactionsByEmployee, setTransactionsByEmployee, transactionApprovalUpdates, setTransactionApprovalUpdates);\n  const transactions = useMemo(() => {\n    var _paginatedTransaction;\n\n    if (isEmployeeFilterApplied) {\n      return transactionsByEmployee;\n    }\n\n    return (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : null;\n  }, [paginatedTransactions, transactionsByEmployee, isEmployeeFilterApplied]);\n  const loadAllTransactions = useCallback(async () => {\n    transactionsByEmployeeUtils.invalidateData();\n    await fetchAllEmployees();\n    await fetchAllTransactions();\n  }, [fetchAllEmployees, fetchAllTransactions, transactionsByEmployeeUtils]); // const loadTransactionsByEmployee = useCallback(\n  //   async (employeeId: string) => {\n  //     paginatedTransactionsUtils.invalidateData()\n  //     await transactionsByEmployeeUtils.fetchById(employeeId)\n  //   },\n  //   [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  // )\n\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    setIsEmployeeFilterApplied(true);\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeesLoading) {\n      loadAllTransactions();\n    }\n  }, [employeesLoading, employees, loadAllTransactions]);\n  useEffect(() => {\n    if (!isEmployeeFilterApplied) {\n      // Invalidate and fetch all transactions data again when transactionApprovalUpdates changes\n      fetchAllTransactions();\n    }\n  }, [transactionApprovalUpdates, fetchAllTransactions, isEmployeeFilterApplied]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: employeesLoading // modified to employeesLoading here\n        ,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null || newValue.id === '') {\n            // Checking for null or empty string ID\n            // Fetch all transactions when \"All Employees\" is selected\n            setIsEmployeeFilterApplied(false);\n            setTransactionApprovalUpdates({}); // Clear transaction approval updates\n\n            await loadAllTransactions();\n          } else {\n            // Fetch transactions for the selected employee\n            setTransactionApprovalUpdates({}); // Clear transaction approval updates\n\n            await transactionsByEmployeeUtils.fetchById(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null && !isEmployeeFilterApplied && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: transactionsLoading // modified to transactionsLoading here\n          ,\n          onClick: async () => {\n            await fetchAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"4S2NOBO7sHHiOzNf2JTBA5PY1XM=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","loading","employeesLoading","fetchAll","fetchAllEmployees","employeeUtils","isEmployeeFilterApplied","setIsEmployeeFilterApplied","transactionsByEmployee","setTransactionsByEmployee","paginatedTransactions","transactionsLoading","fetchAllTransactions","paginatedTransactionsUtils","transactionApprovalUpdates","setTransactionApprovalUpdates","transactionsByEmployeeUtils","transactions","loadAllTransactions","invalidateData","loadTransactionsByEmployee","employeeId","fetchById","item","value","id","label","firstName","lastName","newValue","nextPage"],"sources":["/Users/tarushukla/Downloads/ramp-fe-challenge 2/src/App.tsx"],"sourcesContent":["import React from \"react\";\nimport { Fragment, useCallback,useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, loading: employeesLoading, fetchAll: fetchAllEmployees, ...employeeUtils } = useEmployees()\n  // const { data: paginatedTransactions, loading: transactionsLoading, fetchAll: fetchAllTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  \n  // const [transactionApprovalUpdates, setTransactionApprovalUpdates] = useState({})\n\n  // const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee(transactionApprovalUpdates, setTransactionApprovalUpdates)\n  \n   const [isEmployeeFilterApplied, setIsEmployeeFilterApplied] = useState(false);\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState(null)\n  const { data: paginatedTransactions, loading: transactionsLoading, fetchAll: fetchAllTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const [transactionApprovalUpdates, setTransactionApprovalUpdates] = useState({})\n  const transactionsByEmployeeUtils = useTransactionsByEmployee(transactionsByEmployee, setTransactionsByEmployee, transactionApprovalUpdates, setTransactionApprovalUpdates)\n  \n  const transactions = useMemo(\n    () => {\n      if (isEmployeeFilterApplied) {\n        return transactionsByEmployee;\n      }\n      return paginatedTransactions?.data ?? null;\n    },\n    [paginatedTransactions, transactionsByEmployee, isEmployeeFilterApplied]\n  )\n  \n\n  const loadAllTransactions = useCallback(async () => {\n    transactionsByEmployeeUtils.invalidateData()\n\n    await fetchAllEmployees()\n    await fetchAllTransactions()\n\n  }, [fetchAllEmployees, fetchAllTransactions, transactionsByEmployeeUtils])\n\n  // const loadTransactionsByEmployee = useCallback(\n  //   async (employeeId: string) => {\n  //     paginatedTransactionsUtils.invalidateData()\n  //     await transactionsByEmployeeUtils.fetchById(employeeId)\n  //   },\n  //   [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  // )\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      setIsEmployeeFilterApplied(true);\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n  \n  useEffect(() => {\n    if (employees === null && !employeesLoading) {\n      loadAllTransactions()\n    }\n  }, [employeesLoading, employees, loadAllTransactions])\n  useEffect(() => {\n    if (!isEmployeeFilterApplied) {\n      // Invalidate and fetch all transactions data again when transactionApprovalUpdates changes\n      fetchAllTransactions();\n    }\n  }, [transactionApprovalUpdates, fetchAllTransactions, isEmployeeFilterApplied]);\n  \n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={employeesLoading} // modified to employeesLoading here\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null || newValue.id === '') { // Checking for null or empty string ID\n              // Fetch all transactions when \"All Employees\" is selected\n              setIsEmployeeFilterApplied(false);\n              setTransactionApprovalUpdates({}); // Clear transaction approval updates\n              await loadAllTransactions()\n            } else {\n              // Fetch transactions for the selected employee\n              setTransactionApprovalUpdates({}); // Clear transaction approval updates\n              await transactionsByEmployeeUtils.fetchById(newValue.id);\n            }\n          }}\n          \n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n           {/* Show 'View More' button only when there's a next page for paginated transactions and not filtering by employee*/}\n        {paginatedTransactions?.nextPage !== null && !isEmployeeFilterApplied && (\n          <button\n            className=\"RampButton\"\n            disabled={transactionsLoading} // modified to transactionsLoading here\n            onClick={async () => {\n              await fetchAllTransactions()\n            }}\n          >\n            View More\n          </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}