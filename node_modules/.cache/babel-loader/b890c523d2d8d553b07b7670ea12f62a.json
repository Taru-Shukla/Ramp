{"ast":null,"code":"var _jsxFileName = \"/Users/tarushukla/Downloads/ramp-fe-challenge 2/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Fragment, useCallback, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    const newTransactions = await paginatedTransactionsUtils.fetchAll(); // fetch new transactions\n    // Merge old transactions with new ones\n\n    if (paginatedTransactions && paginatedTransactions.data) {\n      paginatedTransactions.data = [...paginatedTransactions.data, ...newTransactions];\n    } //transactionsByEmployeeUtils.invalidateData()\n\n\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils, paginatedTransactions]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]); // const loadAllTransactions = useCallback(async () => {\n  //   setIsLoading(true)\n  //   const newTransactions = await paginatedTransactionsUtils.fetchAll()  // fetch new transactions\n  //   // Merge old transactions with new ones\n  //   if(paginatedTransactions && paginatedTransactions.data) {\n  //     paginatedTransactions.data = [...paginatedTransactions.data, ...newTransactions];\n  //   }\n  //   setIsLoading(false)\n  // }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils, paginatedTransactions])\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          console.log('newValue', newValue);\n\n          if (newValue === null || newValue.id === '') {\n            // Checking for null or empty string ID\n            // Fetch all transactions when \"All Employees\" is selected\n            // await transactionsByEmployeeUtils.fetchById('all');\n            await employeeUtils.fetchAll();\n            await paginatedTransactionsUtils.fetchAll();\n          } else {\n            // Fetch transactions for the selected employee\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), transactions !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"+g9bB9Yqd0myaExayN8LSYd8gJ8=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Fragment","useCallback","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","transactions","loadAllTransactions","newTransactions","fetchAll","loadTransactionsByEmployee","employeeId","invalidateData","fetchById","item","value","id","label","firstName","lastName","newValue","console","log","loading"],"sources":["/Users/tarushukla/Downloads/ramp-fe-challenge 2/src/App.tsx"],"sourcesContent":["import React from \"react\";\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    const newTransactions = await paginatedTransactionsUtils.fetchAll()  // fetch new transactions\n    // Merge old transactions with new ones\n    if(paginatedTransactions && paginatedTransactions.data) {\n      paginatedTransactions.data = [...paginatedTransactions.data, ...newTransactions];\n    }\n    //transactionsByEmployeeUtils.invalidateData()\n\n    await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n\n    setIsLoading(false)\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils,paginatedTransactions])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n  // const loadAllTransactions = useCallback(async () => {\n  //   setIsLoading(true)\n  \n  //   const newTransactions = await paginatedTransactionsUtils.fetchAll()  // fetch new transactions\n  \n  //   // Merge old transactions with new ones\n  //   if(paginatedTransactions && paginatedTransactions.data) {\n  //     paginatedTransactions.data = [...paginatedTransactions.data, ...newTransactions];\n  //   }\n  \n  //   setIsLoading(false)\n  // }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils, paginatedTransactions])\n  \n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            console.log('newValue', newValue)\n            if (newValue === null || newValue.id === '') { // Checking for null or empty string ID\n              // Fetch all transactions when \"All Employees\" is selected\n              // await transactionsByEmployeeUtils.fetchById('all');\n              await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n            } else {\n              // Fetch transactions for the selected employee\n              await loadTransactionsByEmployee(newValue.id);\n            }\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n          {transactions !== null && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}