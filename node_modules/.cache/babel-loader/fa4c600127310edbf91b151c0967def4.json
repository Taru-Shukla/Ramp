{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState([]);\n  const [transactionApprovalUpdates, setTransactionApprovalUpdates] = useState({}); // const fetchById = useCallback(\n  //   async (employeeId: string) => {\n  //     // Check if \"All Employees\" option is selected\n  //     if (employeeId === '') {\n  //       // If \"All Employees\" option is selected, fetch all transactions\n  //       const allTransactionsData = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n  //         \"transactionsByEmployee\",\n  //         {\n  //           employeeId, // '' is considered as a special ID to fetch all transactions\n  //         }\n  //       )\n  //       setTransactionsByEmployee(allTransactionsData)\n  //     } else {\n  //       // If a specific employee is selected, fetch transactions for that employee\n  //       const data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n  //         \"transactionsByEmployee\",\n  //         {\n  //           employeeId,\n  //         }\n  //       )\n  //       setTransactionsByEmployee(data)\n  //     }\n  //   },\n  //   [fetchWithCache]\n  // )\n\n  const fetchById = useCallback(async employeeId => {\n    // Check if \"All Employees\" option is selected\n    if (employeeId === '') {\n      // If \"All Employees\" option is selected, fetch all transactions\n      const allTransactionsData = await fetchWithCache(\"transactionsByEmployee\", {\n        employeeId\n      } // '' is considered as a special ID to fetch all transactions\n      ); // Ensure allTransactionsData is not null before setting it\n\n      if (allTransactionsData) {\n        setTransactionsByEmployee(allTransactionsData);\n      } else {\n        setTransactionsByEmployee([]);\n      }\n    } else {\n      // If a specific employee is selected, fetch transactions for that employee\n      const data = await fetchWithCache(\"transactionsByEmployee\", {\n        employeeId\n      }); // Ensure data is not null before setting it\n\n      if (data) {\n        setTransactionsByEmployee(data);\n      } else {\n        setTransactionsByEmployee([]);\n      }\n    }\n  }, [fetchWithCache]);\n  const updateApprovalStatus = useCallback((transactionId, approved) => {\n    setTransactionApprovalUpdates(prevUpdates => ({ ...prevUpdates,\n      [transactionId]: approved\n    }));\n  }, []); // const invalidateData = useCallback(() => {\n  //   setTransactionsByEmployee(null)\n  // }, [])\n\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee([]); // Clear the transactions by setting it to an empty array\n  }, []);\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    invalidateData,\n    updateApprovalStatus\n  };\n}\n\n_s(useTransactionsByEmployee, \"gh6PjYY786K1yNfRhLlQ1kEaR3E=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useTransactionsByEmployee","fetchWithCache","loading","transactionsByEmployee","setTransactionsByEmployee","transactionApprovalUpdates","setTransactionApprovalUpdates","fetchById","employeeId","allTransactionsData","data","updateApprovalStatus","transactionId","approved","prevUpdates","invalidateData"],"sources":["/Users/tarushukla/Downloads/ramp-fe-challenge 2/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\"\nimport { TransactionsByEmployeeResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function useTransactionsByEmployee(): TransactionsByEmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[]>([])\n  const [transactionApprovalUpdates, setTransactionApprovalUpdates] = useState<Record<string, boolean>>({})\n\n\n  // const fetchById = useCallback(\n  //   async (employeeId: string) => {\n  //     // Check if \"All Employees\" option is selected\n  //     if (employeeId === '') {\n  //       // If \"All Employees\" option is selected, fetch all transactions\n  //       const allTransactionsData = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n  //         \"transactionsByEmployee\",\n  //         {\n  //           employeeId, // '' is considered as a special ID to fetch all transactions\n  //         }\n  //       )\n  \n  //       setTransactionsByEmployee(allTransactionsData)\n  //     } else {\n  //       // If a specific employee is selected, fetch transactions for that employee\n  //       const data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n  //         \"transactionsByEmployee\",\n  //         {\n  //           employeeId,\n  //         }\n  //       )\n  \n  //       setTransactionsByEmployee(data)\n  //     }\n  //   },\n  //   [fetchWithCache]\n  // )\n \n  const fetchById = useCallback(\n    async (employeeId: string) => {\n      // Check if \"All Employees\" option is selected\n      if (employeeId === '') {\n        // If \"All Employees\" option is selected, fetch all transactions\n        const allTransactionsData = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n          \"transactionsByEmployee\",\n          { employeeId } // '' is considered as a special ID to fetch all transactions\n        )\n    \n        // Ensure allTransactionsData is not null before setting it\n        if (allTransactionsData) {\n          setTransactionsByEmployee(allTransactionsData)\n        } else {\n          setTransactionsByEmployee([])\n        }\n      } else {\n        // If a specific employee is selected, fetch transactions for that employee\n        const data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n          \"transactionsByEmployee\",\n          { employeeId }\n        )\n    \n        // Ensure data is not null before setting it\n        if (data) {\n          setTransactionsByEmployee(data)\n        } else {\n          setTransactionsByEmployee([])\n        }\n      }\n    },\n    [fetchWithCache]\n  )\n \n  const updateApprovalStatus = useCallback(\n    (transactionId: string, approved: boolean) => {\n      setTransactionApprovalUpdates(prevUpdates => ({\n        ...prevUpdates,\n        [transactionId]: approved,\n      }))\n    },\n    []\n  )\n  \n  // const invalidateData = useCallback(() => {\n  //   setTransactionsByEmployee(null)\n  // }, [])\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee([]) // Clear the transactions by setting it to an empty array\n  }, [])\n\n  return { data: transactionsByEmployee, loading, fetchById, invalidateData, updateApprovalStatus }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,yBAAT,GAAmE;EAAA;;EACxE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,sBAAD,EAAyBC,yBAAzB,IAAsDN,QAAQ,CAAgB,EAAhB,CAApE;EACA,MAAM,CAACO,0BAAD,EAA6BC,6BAA7B,IAA8DR,QAAQ,CAA0B,EAA1B,CAA5E,CAHwE,CAMxE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;;EAEA,MAAMS,SAAS,GAAGV,WAAW,CAC3B,MAAOW,UAAP,IAA8B;IAC5B;IACA,IAAIA,UAAU,KAAK,EAAnB,EAAuB;MACrB;MACA,MAAMC,mBAAmB,GAAG,MAAMR,cAAc,CAC9C,wBAD8C,EAE9C;QAAEO;MAAF,CAF8C,CAE/B;MAF+B,CAAhD,CAFqB,CAOrB;;MACA,IAAIC,mBAAJ,EAAyB;QACvBL,yBAAyB,CAACK,mBAAD,CAAzB;MACD,CAFD,MAEO;QACLL,yBAAyB,CAAC,EAAD,CAAzB;MACD;IACF,CAbD,MAaO;MACL;MACA,MAAMM,IAAI,GAAG,MAAMT,cAAc,CAC/B,wBAD+B,EAE/B;QAAEO;MAAF,CAF+B,CAAjC,CAFK,CAOL;;MACA,IAAIE,IAAJ,EAAU;QACRN,yBAAyB,CAACM,IAAD,CAAzB;MACD,CAFD,MAEO;QACLN,yBAAyB,CAAC,EAAD,CAAzB;MACD;IACF;EACF,CA9B0B,EA+B3B,CAACH,cAAD,CA/B2B,CAA7B;EAkCA,MAAMU,oBAAoB,GAAGd,WAAW,CACtC,CAACe,aAAD,EAAwBC,QAAxB,KAA8C;IAC5CP,6BAA6B,CAACQ,WAAW,KAAK,EAC5C,GAAGA,WADyC;MAE5C,CAACF,aAAD,GAAiBC;IAF2B,CAAL,CAAZ,CAA7B;EAID,CANqC,EAOtC,EAPsC,CAAxC,CApEwE,CA8ExE;EACA;EACA;;EACA,MAAME,cAAc,GAAGlB,WAAW,CAAC,MAAM;IACvCO,yBAAyB,CAAC,EAAD,CAAzB,CADuC,CACT;EAC/B,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEM,IAAI,EAAEP,sBAAR;IAAgCD,OAAhC;IAAyCK,SAAzC;IAAoDQ,cAApD;IAAoEJ;EAApE,CAAP;AACD;;GAtFeX,yB;UACsBD,c"},"metadata":{},"sourceType":"module"}