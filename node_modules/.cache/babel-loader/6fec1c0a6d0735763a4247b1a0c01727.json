{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState([]);\n  const [transactionApprovalUpdates, setTransactionApprovalUpdates] = useState({}); // const fetchById = useCallback(\n  //   async (employeeId: string) => {\n  //     // Check if \"All Employees\" option is selected\n  //     if (employeeId === '') {\n  //       // If \"All Employees\" option is selected, fetch all transactions\n  //       const allTransactionsData = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n  //         \"transactionsByEmployee\",\n  //         {\n  //           employeeId, // '' is considered as a special ID to fetch all transactions\n  //         }\n  //       )\n  //       setTransactionsByEmployee(allTransactionsData)\n  //     } else {\n  //       // If a specific employee is selected, fetch transactions for that employee\n  //       const data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n  //         \"transactionsByEmployee\",\n  //         {\n  //           employeeId,\n  //         }\n  //       )\n  //       setTransactionsByEmployee(data)\n  //     }\n  //   },\n  //   [fetchWithCache]\n  // )\n\n  const fetchById = useCallback(async employeeId => {\n    let data;\n\n    if (employeeId === '') {\n      // If \"All Employees\" option is selected, fetch all transactions\n      data = await fetchWithCache(\"transactionsByEmployee\", {\n        employeeId\n      });\n    } else {\n      // If a specific employee is selected, fetch transactions for that employee\n      data = await fetchWithCache(\"transactionsByEmployee\", {\n        employeeId\n      });\n    } // Apply approval status updates\n\n\n    data = data.map(transaction => {\n      var _transactionApprovalU;\n\n      return { ...transaction,\n        approved: (_transactionApprovalU = transactionApprovalUpdates[transaction.id]) !== null && _transactionApprovalU !== void 0 ? _transactionApprovalU : transaction.approved\n      };\n    });\n    setTransactionsByEmployee(data);\n  }, [fetchWithCache, transactionApprovalUpdates]);\n  const updateApprovalStatus = useCallback((transactionId, approved) => {\n    setTransactionApprovalUpdates(prevUpdates => ({ ...prevUpdates,\n      [transactionId]: approved\n    }));\n  }, []);\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null);\n  }, []);\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    invalidateData,\n    updateApprovalStatus\n  };\n}\n\n_s(useTransactionsByEmployee, \"gh6PjYY786K1yNfRhLlQ1kEaR3E=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useTransactionsByEmployee","fetchWithCache","loading","transactionsByEmployee","setTransactionsByEmployee","transactionApprovalUpdates","setTransactionApprovalUpdates","fetchById","employeeId","data","map","transaction","approved","id","updateApprovalStatus","transactionId","prevUpdates","invalidateData"],"sources":["/Users/tarushukla/Downloads/ramp-fe-challenge 2/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\"\nimport { TransactionsByEmployeeResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function useTransactionsByEmployee(): TransactionsByEmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[]>([])\n  const [transactionApprovalUpdates, setTransactionApprovalUpdates] = useState<Record<string, boolean>>({})\n\n\n  // const fetchById = useCallback(\n  //   async (employeeId: string) => {\n  //     // Check if \"All Employees\" option is selected\n  //     if (employeeId === '') {\n  //       // If \"All Employees\" option is selected, fetch all transactions\n  //       const allTransactionsData = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n  //         \"transactionsByEmployee\",\n  //         {\n  //           employeeId, // '' is considered as a special ID to fetch all transactions\n  //         }\n  //       )\n  \n  //       setTransactionsByEmployee(allTransactionsData)\n  //     } else {\n  //       // If a specific employee is selected, fetch transactions for that employee\n  //       const data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n  //         \"transactionsByEmployee\",\n  //         {\n  //           employeeId,\n  //         }\n  //       )\n  \n  //       setTransactionsByEmployee(data)\n  //     }\n  //   },\n  //   [fetchWithCache]\n  // )\n  \n  const fetchById = useCallback(\n    async (employeeId: string) => {\n      let data: Transaction[]\n  \n      if (employeeId === '') {\n        // If \"All Employees\" option is selected, fetch all transactions\n        data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n          \"transactionsByEmployee\",\n          { employeeId }\n        )\n      } else {\n        // If a specific employee is selected, fetch transactions for that employee\n        data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n          \"transactionsByEmployee\",\n          { employeeId }\n        )\n      }\n  \n      // Apply approval status updates\n      data = data.map(transaction => ({\n        ...transaction,\n        approved: transactionApprovalUpdates[transaction.id] ?? transaction.approved,\n      }))\n  \n      setTransactionsByEmployee(data)\n    },\n    [fetchWithCache, transactionApprovalUpdates]\n  )\n  const updateApprovalStatus = useCallback(\n    (transactionId: string, approved: boolean) => {\n      setTransactionApprovalUpdates(prevUpdates => ({\n        ...prevUpdates,\n        [transactionId]: approved,\n      }))\n    },\n    []\n  )\n  \n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null)\n  }, [])\n\n  return { data: transactionsByEmployee, loading, fetchById, invalidateData, updateApprovalStatus }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,yBAAT,GAAmE;EAAA;;EACxE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,sBAAD,EAAyBC,yBAAzB,IAAsDN,QAAQ,CAAgB,EAAhB,CAApE;EACA,MAAM,CAACO,0BAAD,EAA6BC,6BAA7B,IAA8DR,QAAQ,CAA0B,EAA1B,CAA5E,CAHwE,CAMxE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;;EAEA,MAAMS,SAAS,GAAGV,WAAW,CAC3B,MAAOW,UAAP,IAA8B;IAC5B,IAAIC,IAAJ;;IAEA,IAAID,UAAU,KAAK,EAAnB,EAAuB;MACrB;MACAC,IAAI,GAAG,MAAMR,cAAc,CACzB,wBADyB,EAEzB;QAAEO;MAAF,CAFyB,CAA3B;IAID,CAND,MAMO;MACL;MACAC,IAAI,GAAG,MAAMR,cAAc,CACzB,wBADyB,EAEzB;QAAEO;MAAF,CAFyB,CAA3B;IAID,CAf2B,CAiB5B;;;IACAC,IAAI,GAAGA,IAAI,CAACC,GAAL,CAASC,WAAW;MAAA;;MAAA,OAAK,EAC9B,GAAGA,WAD2B;QAE9BC,QAAQ,2BAAEP,0BAA0B,CAACM,WAAW,CAACE,EAAb,CAA5B,yEAAgDF,WAAW,CAACC;MAFtC,CAAL;IAAA,CAApB,CAAP;IAKAR,yBAAyB,CAACK,IAAD,CAAzB;EACD,CAzB0B,EA0B3B,CAACR,cAAD,EAAiBI,0BAAjB,CA1B2B,CAA7B;EA4BA,MAAMS,oBAAoB,GAAGjB,WAAW,CACtC,CAACkB,aAAD,EAAwBH,QAAxB,KAA8C;IAC5CN,6BAA6B,CAACU,WAAW,KAAK,EAC5C,GAAGA,WADyC;MAE5C,CAACD,aAAD,GAAiBH;IAF2B,CAAL,CAAZ,CAA7B;EAID,CANqC,EAOtC,EAPsC,CAAxC;EAUA,MAAMK,cAAc,GAAGpB,WAAW,CAAC,MAAM;IACvCO,yBAAyB,CAAC,IAAD,CAAzB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEK,IAAI,EAAEN,sBAAR;IAAgCD,OAAhC;IAAyCK,SAAzC;IAAoDU,cAApD;IAAoEH;EAApE,CAAP;AACD;;GA7Eed,yB;UACsBD,c"},"metadata":{},"sourceType":"module"}